BATCH : SA2410011

Module 2 : 3rd Dec. 2024

Tue-Friday 	- LIVE Sessions - 8PM to 10:30PM  IST
Mondays 	- Mentoring Session

https://github.com/SA-Team-DevOps-03-Dec-24/Training_Documents

######################
Day 1 : 3rd Dec. 2024
######################

Module 2: Fundamentals Of Linux 

1. Overview of Linux
2. Linux Architecture
3. Linux Distributions
4. Basic Linux Commands
5. File Permission Management
6. User Creation
7. Shell Scripts
8. SSH and VI Utility


	Linux :
	
		What is Linux ?
		
		- OS is an interface between User Applications and Underlying Hardware
		
		- Linux is an Open Source Operating System 
		- Linux OS was created based on Unix 
		
		- Linux Distributions :
		
			- Centos / RHEL 
			
			- Debian / Ubuntu
			
			- Fedora 
			
			- Amazon Linux
				- Based on Fedoro Distribution
				
		- Core of Linux OS is called as Kernel
			- Creates a dedicated Address Space to run any application/task/process
				- Storage 
				- Network 
				- IPC - Inter-Process Communication 
				- Security 
				- User Management
				- Namespaces 
				- Control Groups 
				- Process 
					- Will be assigned with unique process Id.
				
		- Linux Distributions :
		
			Flavors of Linux : 						Package Manager : 	Used to Manage the Packages
																		Install/Un-install/Update the Packages 
		
			- Centos / RHEL 				--		yum
			
			- Debian / Ubuntu***			--		apt-get / apt
			
			- Fedora 						--		dnf
			
			- Amazon Linux					--		dnf(latest Amazon Linux) / yum(previous version)
				- Based on Fedoro Distribution		
			
			- Package Managers are executed as a root user.
				Once we login to Linux Machine 
				Elevate the Access to root user level.
					sudo -i 		# To Elevate the access to root user.
		
		- Computing Device :
		
			- Desktop Machines 
			- Laptop 
			- Mobile Devices
			
	Learn Linux on DevOps Perspective :
	
		- DevOps Team Roles & Responsibilities :
		
			- Install all the DevOps Tools/Packages and Services on Linux Machines.
			- Package Management :
				- Periodic Upgrade of packages 
					Eg.: jdk11 --> jdk17 - Upgrade - update and clean-up the previous version
										 - Update  - Just Update to New Version 
				- Un-install the Packages
				- Back-up and Restore 
			
			- Remote Server Management - i.e., Client Server Architecture
			
				Server (VM)				
					- Client1,2,3,4,5 (VM)
					
			- Manage Linux Machines :
			
				- Package Management 
				- File Management 
				- User Management 
				- Access Management
				- Remote Server Management 
					SSH (Secure SHell) Protocol -	
						SSH Connection using Port 22.
						
							- Host Name 						
							- User Name 							
							- Credential
								Types of Authentication :								
									- Password based Authentication
									- Token based Authentication
									- Key based Authentication
										- Private key 
										- Authorized_keys / Public Key 
									- Passwordless Authentication

				- Process Automation
					- Linux Shell Scripting 
										



	1. Package Management :
	
		- Linux Module :
			AWS Cloud Platform :
			
		- Launch an EC2 Instance 
			- AMI Ubuntu v22.04	(Previous Version)
			- t2.mirco
			- existing key-pair
					
		- Connect to EC2 Instance 
			- EC2 Instance Connect through AWS Console web-browser
			
			- Terminals : Command prompt/gitbash/Terminal
			
			- Using SSH Agent:
				- MobaXterm -> https://mobaxterm.mobatek.net/download-home-edition.html
								- Click on Installer Edition 
									- Downloads a *.zipfile 
										- Extract and run that exec file 
										
										
				- Host_Name 		-> <Public_IP Address>
				- User_Name 		-> ubuntu 
				- Private Key file 	-> *.pem
				
		- Login to Ubuntu Machine 		
	
		- Working Linux CLI Commands
		
	github account ?  https://github.com/ 
		
	
		Package Management :
		
			Flavors of Linux : 						Package Manager : 	Used to Manage the Packages
																		Install/Un-install/Update the Packages 
		
			- Centos / RHEL 				--		yum
			
			- Debian / Ubuntu***			--		apt-get / apt
			
			- Fedora 						--		dnf
			
			- Amazon Linux					--		dnf(latest Amazon Linux) / yum(previous version)
				- Based on Fedoro Distribution		
			
			- Package Managers are executed as a root user.
				Once we login to Linux Machine 
				Elevate the Access to root user level.
					sudo -i 		# To Elevate the access to root user.
					
	
	- Working Linux CLI Commands
	
		clear 			# Clear the Screen
		
		hostname		# To get the Host Name 
		
		sudo -i 		# To Elevate the access to root user.
		
		apt update 		# To update the default system and security packages 

		
######################
Day 2 : 4th Dec. 2024
######################

	- Package Management 
	
		git - Open Source Version Control System 

		sudo -i 
		
		apt install git -y
		
		git --version
		
		
		Install a package : maven 		# Maven is a Build Tool
		
													Tomcat 		Nginx		GIT 	Maven 
												
			- Install the Pre-requisites 		 	jdk								JDK 
			
			- Install the Actual Package 			Tomcat		Nginx		GIT		Maven  
			
			- Post-Installation Activities 			Start		Start 
			
			
		Package :

			Can be executed as a Service 
			Can be Executed as a Tool
			
			Service : 	Start/Stop/Restart/Enable/Disable/Status
			
		Web Applications :	
		
		Tomcat/Nginx/Jenkins			# Executed as a Service 
		
		Maven							# Executed as a Tool 
		
		MY_SQL DataBase 
		
		apt install nginx -y

		nginx -version 
		
			systemctl 			# Is a command line utility to manage the services running on Linux Machine
		
			systemctl status nginx
			systemctl stop nginx
			systemctl start nginx
			systemctl enable nginx			# Make Nginx as a Startup Task 
			systemctl disable nginx			# Remove from startup task list
			
		
		Un-Installation of any Package :
		
			apt remove nginx -y
		
		Update the Package :
		
			apt update/upgrade nginx_3.9 -y
			
		which nginx 						# To get the installation path.
		
		which git 
		
		Manual Installation ::
		
			Download the Package :
			
				wget <url>					# used to download the package 
			
				Extract using tar command in the specific directory.
			
			
	- File Management :::
	
		-> Directory/Folder
		
		-> Files 
		

	
	- pwd 					# Present Working Directory 
	
	- ls 					# To list the files and folders from the current directory

	- ls -a					# To list all the files and folders from the current directory including hidden files and folders
		
	- cd 					# Change Directory 
	
	- cd /					# Take the control to root directory
	
	- cd ~ 					# Take the control to home directory
	
	- mkdir dir1			# To Create Directory 
	
	- cd ..					# Move back to previous directory
	
	- cd /etc 
	
	Create Files in Directory :
	
	echo "Hello"			# echo Command is to used print any message to the terminal.
	
	
	touch <file_name>		# Create Empty file 
	
	echo "Hello" >> file_name 	# Create a file with content

	cat file_name			# Read the contents of the a file

	
	vi file_name			# Create/Open a file using vi editor
	
	Eg.: 

		vi test1 
		
			press i						# Goto Insert Mode 
			
			Type the File Contents 

			press esc :wq				# Save and Exit from that file 
			
			press esc :q!				# Exit without saving the file
			
	
	echo "Hello" >> file1.txt			# Create a file with content
										# Add More Records to a file 
								
	echo "Dummy Record" > file1.txt		# Replace the file content 	
	
	cat file_name
	
	cp file_name <Target_Dir_Name>		# Copy file to another directory 
	
		eg.: 
		
			cp file1.txt /home/ubuntu/dir3
	
	mv file_name <Target_Dir_Name>		# Move file to another directory 
	
		eg.: 
		
			mv file1.txt /home/ubuntu/dir3
			
			mv file1.txt /home/devopsadmin/dir3
			
	Rename the File :					
		
		mv existing_file_name <new_file_name>
	
	
	rm <file_name>						# Remove a file 	
	
	rm -rf dir3							# Remove a directory	
	
	touch .file_name 					# Create Hidden File 
	
	mkdir .dir1							# Hidden Directory
	
	ll									# Long Listing 
	
    1  exit
    2  apt update
    3  apt update -y
    4  clear
    5  apt install git
    6  git --version
    7  apt install nginx
    8  nginx --version
    9  clear
   10  nginx -version
   11  systemctl status nginx
   12  systemctl stop nginx
   13  systemctl status nginx
   14  systemctl start nginx
   15  systemctl status nginx
   16  systemctl enable nginx
   17  systemctl stop nginx
   18  systemctl status nginx
   19  which git
   20  which nginx
   21  which jdk
   22  clear
   23  apt update
   24  clear
   25  exit
   26  pwd
   27  cd /
   28  pwd
   29  clear
   30  pwd
   31  cd ~
   32  pwd
   33  exit
   34  cd /
   35  pwd
   36  ls
   37  cd home/
   38  ls
   39  cd ..
   40  ls
   41  cd etc
   42  pwd
   43  ls
   44  cd /
   45  clear
   46  cd /etc
   47  ls
   48  exit
   49  pwd
   50  exit
   51  history

    1  hostname -i
    2  clear
    3  apt update -y
    4  sudo -i
    5  sudo -i
    6  clear
    7  sudo -i
    8  pwd
    9  ls
   10  cd /
   11  pwd
   12  cd home
   13  pwd
   14  ls
   15  cd ubuntu/
   16  pwd
   17  cd /
   18  c home/
   19  cd home/
   20  cd ~
   21  pwd
   22  sudo -i
   23  clear
   24  pwd
   25  ls
   26  mkdir dir1
   27  ls
   28  pwd
   29  mkdir dir2
   30* l
   31  mkdir dir3
   32  ls
   33  cd dir1/
   34  pwd
   35  ls
   36  mkdir sub-dir1.1
   37  ls
   38  cd sub-dir1.1/
   39  pwd
   40  cd ..
   41  pwd
   42  cd ..
   43  pwd
   44  cd /
   45  clear
   46  pwd
   47  sudo -i
   48  pwd
   49  cd ~
   50  pwd
   51  ls
   52  cd etc
   53  cd /etc
   54  cd /
   55  pwd
   56  cd etc
   57  clear
   58  pwd
   59  cd /
   60  ls
   61  cd ~
   62  cd dir1
   63  cd sub-dir1.1/
   64  pwd
   65  cd -
   66  cd sub-dir1.1/
   67  clear
   68  cd -
   69  clear
   70  cd sub-dir1.1/
   71  cd ..//
   72  clear
   73  cd sub-dir1.1/
   74  pwd
   75  cd /
   76  cd ~
   77  sudo -i
   78  pwd
   79  echo "Hello"
   80  pwd
   81  ls
   82  cd dir1
   83  ls
   84  clear
   85  pwd
   86  ls
   87  cd ..
   88  ls
   89  cd dir2
   90  ls
   91  clear
   92  ls
   93  touch file1.txt
   94  ls
   95  cat file1.txt
   96  echo "hello" >> test1
   97  ls
   98  cat test1
   99  echo "hello1" >> test1
  100  cat test1
  101  echo "hello2" >> test1
  102  cat test1
  103  echo "hello3" >> test1
  104  cat test1
  105  clear
  106  l
  107  vi test1
  108  cat test1
  109  vi test1
  110  cat test1
  111  vi test1
  112  cat test1
  113  clear
  114  ls
  115  cat file1.txt
  116  echo "rec1" >> file1.txt
  117  cat file1.txt
  118  echo "rec2" >> file1.txt
  119  echo "rec3" >> file1.txt
  120  echo "rec4" >> file1.txt
  121  cat file1.txt
  122  echo "New Record1" > file1.txt
  123  cat file1.txt
  124  echo "Dummy Record1" > file1.txt
  125  cat file1.txt
  126  echo "Dummy Record2" >> file1.txt
  127  cat file1.txt
  128  cat test1
  129  cat test1 > test2
  130  ls
  131  cat test2
  132  cat test1
  133  clear
  134  ls
  135  pwd
  136  cd ..
  137  cd dir3/
  138  ls
  139  cd -
  140  cd dir1
  141  cd ..
  142  cd dir2
  143  ls
  144  cp test1 /home/ubuntu/dir3/
  145  ls
  146  cd ..
  147  cd dir3/
  148  ls
  149  cd -
  150  cd dir2/
  151  ls
  152  mv test2 /home/ubuntu/dir3/
  153  ls
  154  cd dir3
  155  cd ls
  156  cd //
  157  cd clear
  158  cd ~
  159  clear
  160  cd dir3/
  161  ls
  162  mv test2 dummyfile2
  163  ls
  164  cd ..
  165  ls
  166  cd dir3/
  167  ls
  168  rm test1
  169  ls
  170  cd ..
  171  rm -rf dir3
  172  ls
  173  cd dir2/
  174  ls
  175  rm -r test1
  176  ls
  177  clear
  178  ls -a
  179  ls
  180  touch .testfile1
  181  ls
  182  ls -a
  183  mkdir .temp-dir
  184  ls
  185  ls -a
  186  clear
  187  ls
  188  mkdir temp-dir1
  189  mkdir temp
  190  touch t
  191  touch t2
  192  touch t2333
  193  ls
  194  ll
  195  clear
  196  ls
  197  ll
  198  sudo -i
  199  history

Next :::
	
	Access Management 
	
	User Management 

		drwxrwxrwx

######################
Day 3 : 5th Dec. 2024
######################

	- Access Management 
	
	- User Management 
	
	- Remote Server Handling!
	
	
	- Access Management :::
	
		File ->
		
		Access Mode :
		
		ll -> Long Listing 
		
		
		
		-rw-rw-r-- 1 ubuntu ubuntu    0 Dec  4 16:45 t2333
		
		drwxrwxrwx 2 ubuntu ubuntu 4096 Dec  4 16:45 temp/
		
		drwxr-x--x 2 ubuntu ubuntu 4096 Dec  4 16:45 temp/
		
		drwxr-x--- 2 ubuntu ubuntu 4096 Dec  4 16:45 temp/
		
		drwx------ 2 ubuntu ubuntu 4096 Dec  4 16:45 temp/
		
		
		----------
		
		file1.sh 	Created by ubuntu user 		| Group Users			| 	Public User
		
		Read 										Read 						Read 
																				
		Write                                       Write                       Write 
																				
		Execute                                     Execute                     Execute
		
		
		
		
		
		Owner 
		
		User Group 	-- Purpose ?
		
		Public User
		
		
		developer1		DEV_GRP
		developer2		DEV_GRP
		
		admin1			ADMIN_GRP
		admin2			ADMIN_GRP
		
		tester1			TESTING_GRP
		
		>> ll 						# Long Listing 
				
		
		drwxrwxr-x  2 ubuntu ubuntu 4096 Aug 16 14:49 dir4/
		-rw-rw-r--  1 ubuntu ubuntu    0 Aug 16 14:54 file1.txt
		
		
		----------
		
		-									# Denote dir or file (Possible value:  d or - )
												'd'  Denotes Directory
												'-'  Denotes File 
												
												
		 ---								# Denote the Owner Level Access 
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access 
		
			---								# Denote the Group Level Access
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access

			   ---							# Denote the Public User Level Access
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access
												
	
		chmod :::
		
		chmod <Access_Level> <File/Directory_Name>
		
		
		chmod 400 file1.txt
		
		chmod 755 temp1.sh
		
		Access Level :
		
			Read 
			Write 
			Execute  
		
		
		
	- User Management ::::
		
		Create New Linux User 
		
		Delete the Linux User 
		
		Set the Access Levels to the user :
		
			- User Authentication 	: Who can access ?
			
			- User Authorization	: What can be accessible ?


		Create Linux User with SSH Keys :::
		
			#Run the useradd command as a root user :
			
			useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin		# Ubuntu 
			
			useradd devopsadmin												# Non - Ubuntu Machines


			useradd user1
			
			su - user1


			Get the List of Linux Users ::::
				cat /etc/passwd
			
			Get the list of Linux User Groups :::: 
				cat /etc/group
			
			
			password ::
			
				passwd devopsadmin					# Create/reset Password to user
				
					root@ip-172-31-4-58:~# passwd devopsadmin
					New password:
					Retype new password:
					passwd: password updated successfully	

				passwd -d devopsadmin				# Remove the Password protection. # Run this command as a root user 
				
				
			sshkey :::
			
				ssh keys :
				
					key pair : Public key and Private Key 
			
				useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

				su - devopsadmin

				ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				

				cd .ssh
				
				ls ~/.ssh 

				#You should see following two files:

				#id_ecdsa - private key
				#id_ecdsa.pub - public
			
			
			cat id_ecdsa.pub > authorized_keys			# authorized_keys this file name should be same.
			
			authorized_keys :::
				It is the copy of Public Key.
				
				Always the private key will be compared with the authorized_keys			
				
			chmod 600 /home/devopsadmin/.ssh/*					# Used to Change the Access Mode of Files or Directories
			
			
			In Ubuntu Machine :
			
			*.pem 				# Private key of ubuntu user 
			
			
			During Login process, *.pem will be compared with authorized_keys of ubuntu user.
			
			# Run this command as a root user. 
			
			chown -R devopsadmin:devopsadmin /root/sampledir1/
			
			
			Tomcat Web Application Server 		# installed  by root user
			
			
			chown -R devopsadmin:devopsadmin /opt/tomcat/
			
			user1 --> created a project folder.
			
	
	- Remote Server Handling ::::
	
	Remote Server Access :::
	
		AWS Cloud :
		
			VM1	(Server)
			
			VM2 (Client)
					
		1. Establish Connection to Remote Server  
		2. Login to the Remote Server 
		3. Copy the Files from one server to another server
			using SCP
		4. Manage the Remote Server - Install any package/Uninstall/Upgrade 			# Will be done using Ansible 
		
		
		
		
		Pre-requisites for Remote Server :::
		
			- Launch 2 VMs (VM1-Source & VM2-Target)
			
			- Ensure that Port 22 is enabled 
			
			- Create User in both the VMs 
			
			- Create SSH-Key in one server(VM1)
			
			- Use the public_Key as a authorized_keys in the Client Machine(VM2)
			
			- Establish SSH Connection & Login to VM2(Client_Machine)
			
			- Copy Files from VM1 to VM2(Client_Machine)

		Client_Machine(VM2) ::::
			
		useradd adminuser1 -s /bin/bash -m -d /home/adminuser1

		su - adminuser1	

		mkdir .ssh 

		cd .ssh 

		vi authorized_keys

		#paste the id_ecdsa.pub of devopsadmin user from Server machine to authorized_keys file in Client Machine 

		chmod 600 /home/adminuser1/.ssh/*
			
			
			From Server execute this Command as a devopsadmin user :
			
			ssh adminuser1@172.31.10.63
					
					
			- Copy Files from VM1 to VM2(Client_Machine)	


				Server Machine ::::		
					/home/devopsadmin/sourcefile.txt 
					
				Client Machine ::::
					/home/adminuser1/sourcefile.txt
			
				#cp  /home/devopsadmin/sourcefile.txt home/devopsadmin/dir1/
				
				scp /home/devopsadmin/sourcefile.txt adminuser1@172.31.10.63:/home/adminuser1


	IT Support Team :
	
		Team - 5 Members --> 
		
			   Desktop Machine 
			   
			   All the required software has to be installed 
			   
			   
				- Host_Name 		-> <Public_IP Address>
				- User_Name 		-> ubuntu 
				- Private Key file 	-> *.pem
				

    1  pwd
    2  exit
    3  passwd devopsadmin
    4  clear
    5  exit
    6  clear
    7  pwd
    8  ls
    9  ls -a
   10  ls
   11  ls -a
   12  ssh-keygen -t ecdsa -b 521
   13  ls -a
   14  cd .ssh/
   15  ls
   16  ll
   17  clear
   18  ls
   19  cat id_ecdsa
   20  cat id_ecdsa.pub
   21  clear
   22  ls
   23  cat id_ecdsa.pub > authorized_keys
   24  ls
   25  ll
   26  clear
   27  ll
   28  chmod 600 /home/devopsadmin/.ssh/*
   29  ll
   30  exit
   31  cd /root/
   32  exit
   33  clear
   34  ls -a
   35  cd .ssh/
   36  ls
   37  ll
   38  cat authorized_keys
   39  clear
   40  cat id_ecdsa.pub
   41  ssh adminuser1@172.31.10.63
   42  clear
   43  cd ~
   44  pwd
   45  echo "rec1" >> sourcefile.txt
   46  ls
   47  scp /home/devopsadmin/sourcefile.txt adminuser1@172.31.10.63:/home/adminuser1
   48  ssh adminuser1@172.31.10.63
   49  history


    1  ls -a
    2  mkdir .ssh
    3  cd .ssh/
    4  ls
    5  vi authorized_keys
    6  ll
    7  chmod 600 /home/adminuser1/.ssh/*
    8  ll
    9  cd ~
   10  pwd
   11  ls
   12  history


Next :

	Process Automation :
	
		Shell Scripting!

######################
Day 4 : 6th Dec. 2024
######################

	Process Automation :
	
		Shell Scripting!
		
		
	Access Managment Perspective!
	
	
	Shell Scripting : To Automate Application Builds and Deployments 
	
	Who can execute the Scripts ?
	
	Owner 			--> RWE
	
	Group Users 	--> RWE
	
	Public Users	--> R-E / --E 
	
	
	Create More Users 
	
	Create More User Groups 
	
	Add Users to the Groups 
	
	A User can be part of more than once User Group 
	
	Application Lead - Dev-Group & DevOps-Group & Testing-Group

	Eg.: 
	
	apt install docker.io -y
		
		To Add Any User to a Group :
		
		usermod -aG <group_name> <user_name>
		
		Eg.: 

		usermod -aG docker devopsadmin
		
		
	Fundamentals of Shell Scripting on DevOps Perspective :::
	
	Process Automation :
	
	1. Create a Test Server 
	
		- TestNG/JUnit/Selinium
	
	2. Create a Build Server (VM) -- Configure 100 Build Servers 
	
		- JDK/MAVEN/Docker	
		
		--> sudo apt install jdk_11
		
		--> sudo apt install maven 
		
		--> sudo apt install docker 
		
		
	vi config-build-tools.sh				# Create Shell Script File
	
		sudo apt install jdk_11	    
		sudo apt install maven 		
        sudo apt install docker 
		
	save 
	
	Run the Script in any Machine.
	
	
	How to prepare the script?
	
	
	Programming Languages 	--> It is used to create Business Applications
								C,C++,Java,.Net,Python,Ruby,COBOL
								Done the Application Development Team
								Eg.: 
									Web Applications - E-Commerce Portals
	
	Scripting Languages		--> It is used to perform some process automation
								It is light-weight when compared to Programming Languages 
								shell Scripting,Groovy,Python,Yaml,Java-Scripting
								Eg.: 
									Configure Build Server 
									Configure Test Environments 
									Periodic Back-up of the Server
									Automate Application Build and Deployments
									Data Validations
								
	For Any DevOps Resources :::

		shell Scripting, Groovy, Yaml Scripts, Python***
		
		
	Shell Scripting Language :
	
		- Shell Scripting is a collection shell/Bash/Linux commands 
		- Shell Script file should be saved as *.sh (Extention should be .sh)
	
	Eg.: 	
	vi config-build-tools.sh				# Create Shell Script File
	
		sudo apt install jdk_11	    
		sudo apt install maven 		
        sudo apt install docker 
		
	save
	
	Scripting / Progamming Languages are used to handle ?
	
	
	Data !
	
	What is Data ?
		- Is just a raw fact - without any meaning! 
		
		INDIA  - Is just raw text - without any meaning!
		
	Information ?
		- The Processed Data.
		
		- INDIA is a Country 
		
		
	Declare the 
	
		Variable Name :
		
			x = 5

			y = "IND"
		
		Data Type : Numeric / Char / String of Chars		
		
		variable :
		
			student_name : "zzz" , "xxx", "yyyy"
			
			student_name = "xxxx"
			
		Array :
		
			student_name[5] : {"zzz" , "xxx", "yyyy", "xxx", "yyyy"}
			
			
		Data Validation :
		
			Conditional Statements :
			
				IF Conditions 
				
					If else 
					 
						If else-if 
						
							Nested If Conditions 
							
			
				Switch Case Statement : To validate the exepected list of data 
				
				
				Email_ID : ****@gmail.com
				
					
						Email_ID == ****@gmail.com
						
			
			Operators : 
			
				==, != , > , <, <=, >= 	
				Arithmetic Operators 
				
				Logical Operators 
				
		Array :
		
			student_name[5] : {"zzz" , "xxx", "yyyy", "xxx", "yyyy"}	
								0		1		2		3		4
								
				student_name[0] = "zzz"
				
				student_name[4] = "yyyy"
				
			Looping Constructs :
			
				Used to perform some process iteration.
			
					for loop 
					
					while
					
					do-while 
					
			
		Functions :
		
			- Set of Instructions which are executed repeatly to perform some task within the application
			
			Pre-Defined Functions 
				- String/Math function
				
			User-Defined Functions 
				- Based on Buisness Logic 
				
				
		File Handling :	
			
			- Sequential Files

			- Using the files we can have the un-organized data in a sequential form
			
		Relational DataBase :
		
			- Data is organized in the form of Tables 
			
			- - Using Rows and Columns 
			
			Students_Table:
			
			Stud_No		Stud_Name		Stud_Contact_Number		Stud_Email_ID		Course
			
			1001		xxxxx			23234123123				asdfasdf@adf.com	DevOps 
			1002		xasdfxxxx		23234123123				asdfasdf@adf.com	DevOps 
			1003		xxxasdfxx		23234123123				asdfasdf@adf.com	DevOps 
			1004		xxxxxasd		23234123123				asdfasdf@adf.com	DevOps 
			1005		asdasd			sdfasdfasdf							
			

	Eg.: 	
	mkdir scripts 
	cd scripts
	
	vi config-build-tools.sh					# Create Shell Script File
		
		#!/bin/bash
		#
		sudo apt install jdk_11	-y   
		sudo apt install maven 	-y	
        sudo apt install docker.io -y
		
	save
	
	chmod 755 config-build-tools.sh
	
	./config-build-tools.sh						# Run/Execute the Shell Script
	
	sh config-build-tools.sh					# Run/Execute the Shell Script



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print Hello World on terminal using echo command

Source Code:

#!/bin/bash
#
echo "Hello World"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print the calender month by default.

Source Code:

#!/bin/bash
#	     
echo "The Month is"
cal # cal command displays current month by default

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to read user input and perform operations with them.

Source Code:

#!/bin/bash
echo -n "Enter number 1 : " # -n option supresses newline
read NUM1 # Read the user input from Standard Input and store in Variable NUM1

echo -n "Enter number 2 : "
read NUM2

SUM=$(($NUM1 + $NUM2)) # Arithmetic expansion using double parentheses
echo "The sum is $SUM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if condition

#Operators :: 6 Operators

Source Code:


#!/bin/bash

NUM1=5 # variabe assignment
NUM2=2

if [ $NUM1 -gt $NUM2 ] # -gt is to test integer numbers
then
    echo "NUM1 > NUM2"
fi



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if else condition

Source Code:

#!/bin/bash

NUM1=2 # Variabe assignment
NUM2=5

if [ $NUM1 -lt $NUM2 ]  # -lt is to test intiger numbers
then
    echo "NUM1 < NUM2"
else
    echo "NUM1 > NUM2"
fi
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of else if condition

Source Code:

#!/bin/bash
#

echo -n "Enter a number: "
read NUM

if [ $NUM -gt 0 ]
then
    echo "$NUM is +ve"
elif [ $NUM -lt 0 ]
then
    echo "$NUM is -ve"
else
    echo "$NUM is 0"
fi

echo "done"

75

-95



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR							# A , a ,e,i,o,u l

case $CHAR in
	a) echo "You entered $CHAR which is a vowel";;  # ;; Terminates each option
	e) echo "You entered $CHAR which is a vowel";;
	i) echo "You entered $CHAR which is a vowel";;
	o) echo "You entered $CHAR which is a vowel";;
	u) echo "You entered $CHAR which is a vowel";;
	*) echo "You entered $CHAR which is not a vowel";; # Defaults to everything else
esac

echo "What if you enter upper case letters!!?, Check the next example"


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR

case $CHAR in
	a | A) # Test for both Lower or Upper case letter
		# You may write commands in this fashion too!!, means multiline commands
		echo "You entered $CHAR which is a vowel"
		;; # Terminates each option
	e | E) 
		echo "You entered $CHAR which is a vowel"
		;;
	i | I) 
		echo "You entered $CHAR which is a vowel"
		;;
	o | O) 
		echo "You entered $CHAR which is a vowel"
		;;
	u | U) 
		echo "You entered $CHAR which is a vowel"
		;;
	*)  # Defaults to everything else
		echo "You entered $CHAR which is not a vowel"
		;;
esac




######################
Day 5 : 10th Dec. 2024
######################

	- Shell Scripts 
	
	- Overview of DevOps 



	Iterations :
	
		- for loop
		
			a[5]	==> {2,3,4,5,6}
			
			
			
			index starts with 0
			
			a[0] = 2 
			a[1] = 3
			a[2] = 4
			a[3] = 5
			a[4] = 6
		
			for(i=0;i<5;i++)
				{
					echo "print to a console: $a[i]"
				}
		
			0 < 5 
			
			1 < 5 
			
			2 < 5 
			 
			.................
		
		
		Data Structures and Algorithms :::
		
		Lists 
		
		Handle the data from various Data store :
		
			- File ==> json/yaml files 
			
		jquery ==> 
		
		
		- while loop 
		- do - while 








A simple script to show usage of string compare operator -z and -n

Source Code:

#!/bin/bash

STR1="Hello"
STR2="Hello"

if [ -z "${STR1}" ]
then
    echo "String1 is empty"
else
    echo "String1 is NOT empty"
fi

echo ":$STR:"
if [ -n "${STR2}" ]
then
    echo "String2 is NOT empty"
else
    echo "String2 is empty"
fi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of logical operators

Source Code:

#!/bin/bash

echo -n "Enter a NUM: "
read NUM

# Check whether a number is between 10 and 20 (Using AND -a operator)
if [ $NUM -ge 10 -a $NUM -le 20 ]
then
    echo "$NUM is between 10 and 20"
else
    echo "$NUM is NOT between 10 and 20"
fi

echo -n "Enter another NUM: "
read NUM

# Check whether a number is between 10 and 20 (Using OR -o operator)
if [ $NUM -lt 10 -o $NUM -gt 20 ]
then
    echo "$NUM is NOT between 10 and 20"
else
    echo "$NUM is between 10 and 20"
fi








~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage while loop

Source Code:

#!/bin/bash
#

COUNT=0

while [ $COUNT -lt 5 ]
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done

echo "Done"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sum of N natural numbers using while loop

Source Code:

#!/bin/bash
#

echo -n "Enter a number: "
read NUM

let SUM=0; 
let I=1
while [ $I -le $NUM ]
do
	SUM=`expr $SUM + $I`
	I=$((${I} + 1))
done

echo "The sum of the first $NUM numbers is: $SUM"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ Bash syntax ]

Source Code:

#!/bin/bash
#

COUNT=0

for i in 0 1 2 3 4
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ C syntax ]

Source Code:

#!/bin/bash

COUNT=0

for ((i = 0; i < 5; i++))
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done

< 	Less than operator 
<=  Less than or equal










~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of command line arguments, Here we access positional arguments using $1, $2 …

Source Code:

#!/bin/bash

echo "Total no. of argument: $#"

echo "Program name: $0"
echo "1st argument: $1"
echo "2nd argument: $2"
echo "3rd argument: $3"



program --> 



















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 A script to show the usage of command line arguments, Here we access arguments by iterating over $@

Source Code:

#!/bin/bash

echo "Total no. of argument: $#"
echo "Argument list: $@" # Commonly used
echo "Argument list: $*"

# Iterate over arguments ($@)
for ARG in $@
do
    echo $ARG
done
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of function

Source Code:


print_hello

#!/bin/bash

# Function definition
function print_hello()
{
    	echo "====="
    	echo "Hello"
    	echo "====="
}

# Call the function - print_hello
print_hello

print_hello
print_hello
print_hello
print_hello


#print_hello





E-Commerce Web App Login Process Language
		Email Validation 
		
	User_Name	: asdfasdf@asdfs.com  		# asdfasd # 23423423 
	
	Password 	: 
	
	
	Sign-up process : 
	
	create username and password 
		- Email validation 
		
		
	Functions / Methods :
	
		- Functions are set of instructions used repeatly within the application
		
		- Meant for Code reusalbility
		
		
		
	Cloud Formation Templates :
	
		*.yaml
		
	Python Scripts --> Create AWS Resources 
	
		Functions 
		
		sum()
		{
			x = 5
			y = 10
			z = x + y
			echo z
		}

		sum(x,y)
		{
			z = x + y
			echo z
		}			

		sum(5,2)


install jdk :::


apt install openjdk-17-jdk


Goto /usr/lib/jvm/ 

vi /etc/profile 

export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64/bin"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of function and how to pass arguments

Source Code:

#!/bin/bash

# Function definition
function find_sum()
{
    SUM=`expr $1 + $2`
    echo $SUM
}

# Pass arguments 10 and 20 to find_sum function
find_sum 10 20 # 30

# Save the output of function in a variable
RESULT=`find_sum 100 200`
echo $RESULT	# 300


num1=5
num2=5


sample1.sh

#!/bin/bash
num1=$1
num2=$2

num3=$num1 + $num2

num3=$1 + $2 + $3 

echo $num3 

sh sample1.sh 34 45 43








~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of function and how to pass arguments Inside function:
$# – Gives no. of arguments
$@ – Contains the arguments to function
Accessing function arguments is similar to accessing command line arguments

Source Code:

#!/bin/bash

# Function definition
function find_sum()
{
    echo "Arg count: $#"
    echo "Arg list: $@"
    SUM=0
    # Iterate over function arguments
    for ARG in $@
    do
	SUM=`expr $ARG + $SUM`
    done

    echo $SUM
}

# Call find_sum with many arguments
find_sum 1 2 3 4 5

find_sum 10 20

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show how to declare an array and access its elements

Source Code:

#!/bin/bash

# Declare an array
FRUITS=(apple mango banana orange)

# Print value of each element
echo "element 0: ${FRUITS[0]}"
echo "element 1: ${FRUITS[1]}"
echo "element 2: ${FRUITS[2]}"
echo "element 3: ${FRUITS[3]}"

# Print size / length of array
echo "Length: ${#FRUITS[@]}"
echo "Whole array: ${FRUITS[@]}"
echo "Whole array: ${FRUITS[*]}"

echo "Looping over array elements"
# Iterate over array elements
for ITEM in ${FRUITS[@]}
do
    echo $ITEM
done


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demostrate usage of sed command

Source Code:

#!/bin/bash

# Basic text substitution using sed
echo "Bash Scripting Bash Language" | sed 's/Bash/Perl/'

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	Learn Linux on DevOps Perspective :
	
		- DevOps Team Roles & Responsibilities :
		
			- Install all the DevOps Tools/Packages and Services on Linux Machines.
			- Package Management :
				- Periodic Upgrade of packages 
					Eg.: jdk11 --> jdk17 - Upgrade - update and clean-up the previous version
										 - Update  - Just Update to New Version 
				- Un-install the Packages
				- Back-up and Restore 
			
			- Remote Server Management - i.e., Client Server Architecture
			
				Server (VM)				
					- Client1,2,3,4,5 (VM)
					
			- Manage Linux Machines :
			
				- Package Management 
				- File Management 
				- User Management 
				- Access Management
				- Remote Server Management 
					SSH (Secure SHell) Protocol -	
						SSH Connection using Port 22.
						
							- Host Name 						
							- User Name 							
							- Credential
								Types of Authentication :								
									- Password based Authentication
									- Token based Authentication
									- Key based Authentication
										- Private key 
										- Authorized_keys / Public Key 
									- Passwordless Authentication
